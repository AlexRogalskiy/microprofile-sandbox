//
// Copyright (c) 2019 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

= MicroProfile Event Sourcing Proposal
:authors: Gordon Hutchison, Gunnar?, Clement?
:email: Gordon.Hutchison@gmail.com
:version-label!:
:sectanchors:
:doctype: book
:license: Apache License v2.0
:source-highlighter: coderay
:toc: left
:toclevels: 4
:sectnumlevels: 4
ifdef::backend-pdf[]
:pagenums:
endif::[]

[[intro]]
== Introduction to MicroProfile Event Sourcing

MicroProfile Event Sourcing allows for the connection of
heterogeneous Microservices' state using MicroProfile
Reactive Messaging as a conduit to transport state change events. 

These events have at their core a state change in terms of 
user's domain objects but they can be generated and 
handled more easily than with traditional methods.
The events contain generated metadata that allows them to be
easily processed by receiving microservices to 
update state data or trigger application work. 

MicroProfile Event Sourcing can work in a 'plug-and-play'
fashion with existing Change Data Capture (CDC) frameworks like
Debezium, existing connector ecosystems like Apache Kafka
Connectors and existing reactive streams sources and sinks
via the MicroProfile Reactive Streams Operators specifications.
 
Transport is provided across any MicroProfile Reactive Messaging
Connector which also provides the abstraction for reactive
back-pressure and message acknowledgement. 

Type converters operate in the same way as 
the MicroProfile Config specification and 
type converter code can be shared or repurposed. 

However, MicroProfile Event Sourcing is not an event sourcing framework.
It simply provides very easy to use mechanisms for
creating, distributing and handling state changes.
It has no opinion on the data consistency or microservice
architecture approach implemented. Its aim is to make
it easy to implement the approach users choose and to
provide the correct level of abstraction in order that issues
of 'plumbing' fade into the background. 
In summary, think of Debezium with additional application layer integration for sources and sinks as MicroProfile reactive streams 
and able to use any MicroProfile reactive messaging Connector
as a transport.

[[sources]]
== Event Generation

State change events can easily be generated by applications,
from the changes that have occurred in databases or from
any reactive stream source. Additionally, other existing
frameworks, such as Kafka Connectors can easily be wrapped
to become event sources.

[[app-source]]
=== Application Sourced Events

State change messages can be generated from
the application layer with an easy to use
programming model that includes the
mechanisms below.

[[transformer-method-shape]]
==== Annotated Methods: newObject = fn( oldObject)

MicroProfile Reactive messaging takes meaning from the
'shape' of annotated method. Transformer methods are
methods that take in an object of a particular type,
apply a function to it and return a new or transformed
object of the same type. Such a method can easily be
annotated to be a state transformation and generate
a state change event containing the 'before' and 'after'
state.

[[dual-writes]]
==== Application Dual Writes

Applications are at liberty to trigger the generation
of state change events at any time using mechanisms
similar to MicroProfile reactive messaging.

[[outbox-connectors]]
==== Outbox Reactive Messaging Connectors

A reactive messaging connector can easily take the
role of an 'outbox', pending the delivery of state
change messages on a subsequent event such as a
one or two phase 'commit' instruction.

[[cdc]]
=== Database Change Data Capture (CDC)

State change events can be generated by plugging 
into Change Data Capture (CDC) support in databases
to create reactive messaging Publishers. 
An example mechanism for this and first target of a
proof of concept could be a _Debezium_ based reactive messaging connector. This connector would implement the _IncomingConnectorFactory_ interface that allows _Debezium_ to act as a reactive streams _Publisher_ of state change events. 

[[outbox]]
=== The 'Outbox' Pattern 

The outbox pattern allows for state change events
to be explicitly created during application processing but
these are held in an 'outbox' and only
distributed if the processing, which may involve
a number of actions, is deemed to be
successful.

[[cdc-outbox]]
==== Database Outbox Table

Many databases allow observation of their change logs
and state change events can be generated directly
from these. This has the following benefits:  

1. There is no involvement of application code, it can even be retro-fitted to existing applications.
2. It can be done under the transactional control of the database.
2. It frequently performs efficiently

Typically, individual application tables are explicitly
included in what changes are captured. 
Pre-existing tables in the application data model can be
tailed but a common pattern is to have one or more additional
tables, still under transaction control, 
for the purposed of holding state changes that the
application wishes to 'broadcast' on a successful commit
of changes to the domain model.

[[txn-mrm-connector]]
==== Transactional MicroProfile Messaging Connector

MicroProfile messaging connectors enable
messages to be easily created by applications.
Providing a connector that makes use of the underlying
platform's transaction support allows for an easy
to use 'store and forward' approach that avoids
the problems of dual writes.

[[connectors]]
== Event Transport

These can be fed through a reactive messaging outgoing Kafka connector for publishing to
the appropriate Kafka topic or any other distribution mechanism that can act as an
outgoing reactive messaging connector.

[[kafka]]
=== Apache Kafka

[[kafka-connectors]]
==== Apache Kafka Connectors

[[kafka-offsets]]
===== At Least Once Delivery

[[kafka-schemas]]
===== Apache Kafka Schemas


[[sinks]]
== Event Handling

On the remote end, an incoming reactive messaging Kafka connector is used to pick
up the event change events from the appropriate topics in the Kafka server. These
are fed onto a reactive streams processor that understand the change event meta-data wrapping
added by the remote event sourcing message envelope.

[[CRDT]]
=== Conflict-free Replication Data Types (CRDT)

This is an interesting value add on top of distributed
state changes. The before+after+metadata structure of
MicroProfile Events Sourcing messages would be an ideal
abstraction on which to support easy to use CRDT
semantics.


[[ecosystem]]
== Ecosystem 

[[reactive]]
=== Reactive Streams Integration

[[back-pressure]]
==== Inter-service Reactive Back-Pressure


[[mp-config]]
=== Integration with MicroProfile Config Converters

[bootstrap]]
== Initial Proof of Concept

Get Debezium example running and implement
a MicroProfile IncomingConnectorFactory.
Link this via a Processor to a KafkaOutgoingConnectorFactory.
Subclass Message to do something useful with the before/after/meta
data stealing semantics from the Debezium Kafka Sink Connector.

[[background]]
== Background Reading

=== Event Sourcing Background

[[event-sourcing]]
A good introduction to Event Sourcing is written at https://martinfowler.com/eaaDev/EventSourcing.html

[[mrm]]
=== MicroProfile Reactive Messaging Background

Much of the scaffolding that MicroProfile Event Sourcing is built on is the
MicroProfile Reactive Messaging specification. You can find an introduction to
that specification here: https://github.com/eclipse/microprofile-reactive-messaging/blob/master/spec/src/main/asciidoc/architecture.asciidoc

[[newsgroup]]
=== Some Initial Newsgroup Discussions

This proposal  emerged from  many discussions and ideas
and a lot of deep work from projects such as MicroProfile
Reactive Messaging, Debezium and Apache Kafka. Some
of the origins are in newsgroup conversations listed below.
Feel free to add to any active threads.

https://groups.google.com/d/msg/microprofile/F0ehhd1MFMc/e2DLvf5tBAAJ
https://groups.google.com/d/msg/microprofile/F0ehhd1MFMc/UPFcUOjGBwAJ
